name: RUNNER V2 (ccache)

on:
  workflow_dispatch:
    inputs:
      project_prefix:
        description: 'Project prefix (e.g., DOTYWRT)'
        required: false
        default: 'DOTYWRT'

      version:
        description: 'Firmware version (e.g., 1.2)'
        required: false
        default: '1.0'

      build_name:
        description: 'Build name (e.g., R1, CUSTOM)'
        required: false
        default: 'K66-R2'

      seed_config:
        description: 'Choose base .config seed file'
        required: true
        type: choice
        default: 'AW10001.seed'
        options:
          - AW10001.seed
          - AW10002.seed
          - AW10003.seed
          - AW10004.seed

      upload_release:
        description: 'Upload firmware to GitHub Release?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  FIRMWARE: backup/bin/targets/qualcommax/ipq807x
  UPLOAD_RELEASE: ${{ github.event.inputs.upload_release }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set timezone to Malaysia
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Kuala_Lumpur /etc/localtime
          echo "Asia/Kuala_Lumpur" | sudo tee /etc/timezone

      - name: Cleanup system for space
        run: |
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /usr/share/dotnet /opt/hostedtoolcache \
            /usr/local/lib/android /usr/local/lib/node_modules /usr/share/swift \
            /usr/share/kotlin /usr/share/rust /opt/az /var/cache/apt /var/lib/gems \
            /usr/local/lib/python*/{dist,site}-packages /var/lib/docker/tmp/*
          docker image prune -a -f

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget p7zip-full ccache

      - name: Set environment variables
        run: |
          echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV
          echo "NOW=$(date '+%d-%b-%Y' | tr 'a-z' 'A-Z')" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          BASE_BUILD_NAME="${{ github.event.inputs.build_name }}"
          DATE_SUFFIX=$(date '+%Y%m%d')
          BUILD_NAME="${BASE_BUILD_NAME}-${DATE_SUFFIX}"
          echo "BUILD_NAME=${BUILD_NAME}" >> $GITHUB_ENV
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "VERSION2=${BASE_BUILD_NAME}" >> $GITHUB_ENV
          echo "FWMODEL=${BASE_BUILD_NAME}" >> $GITHUB_ENV
          echo "PROJECT_PREFIX=${{ github.event.inputs.project_prefix }}" >> $GITHUB_ENV
          echo "FW_BASENAME=${{ github.event.inputs.project_prefix }}-V${{ github.event.inputs.version }}-${BUILD_NAME}" >> $GITHUB_ENV
          echo "FW_CC=${{ github.event.inputs.project_prefix }} V${{ github.event.inputs.version }}-${BUILD_NAME}" >> $GITHUB_ENV

      - name: Clone PNP Settings
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git clone https://$GH_PAT@github.com/dotywrt/DEFAULT.git files
          rm -rf files/.git
          chmod 755 files/etc/uci-defaults/99-setup

      - name: Setup firmware version string
        run: |
          TODAY=$(date '+%d-%b-%Y')
          sed -i "s/DDDD/${TODAY}/g" files/www/luci-static/resources/view/status/include/10_system.js
          sed -i "s/XXXX/${FWMODEL}/g" files/www/luci-static/resources/view/status/include/10_system.js
          sed -i "s/XXXX/$(echo "${FWMODEL}" | tr '[:upper:]' '[:lower:]')/g" files/etc/opkg/customfeeds.conf
          sed -i "s/XXXX/${FWMODEL}/g" files/etc/banner

      - name: Cache downloads
        uses: actions/cache@v3
        with:
          path: dl
          key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-dl-

      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Update & install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Prepare and build firmware (full)
        run: |
          echo "Using config: ${{ github.event.inputs.seed_config }}"
          cp "./seed/${{ github.event.inputs.seed_config }}" .config
          make defconfig
          sed -i '/check_signature/ s/.*/option check_signature 0/' package/system/opkg/files/opkg.conf
          grep -q 'option check_signature 0' package/system/opkg/files/opkg.conf || echo 'option check_signature 0' >> package/system/opkg/files/opkg.conf
          export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
          export PATH="/usr/lib/ccache:$PATH"
          make -j$(nproc) || make -j1 V=s

      - name: Archive firmware
        run: |
          mkdir -p backup
          cp -r bin backup/bin
          cp key-build.pub key-build key-build.ucert key-build.ucert.revoke \
            feeds.conf.default .config backup/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FW_BASENAME }}
          path: backup/

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true'
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo -e "Firmware compiled using Lede source for Arcadyan AW1000.\n" >> release.txt
          echo -e "📶 WiFi SSID:\n  - DOTYWRT 5G\n  - DOTYWRT 2G\n🔑 Password: dotycat.com\n" >> release.txt
          echo -e "🌐 Login:\n  - Default URL: http://192.168.1.1\n  - Username: root\n  - Password: (no password)\n" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
